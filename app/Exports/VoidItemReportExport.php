<?php

namespace App\Exports;

use App\Models\VoidRecords;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Concerns\WithCustomStartCell;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;

class VoidItemReportExport implements FromCollection, WithHeadings, WithEvents, WithCustomStartCell
{
    protected $startDate;
    protected $endDate;
    protected $itemName;
    protected $category;

    public function __construct($startDate, $endDate, $itemName = null, $category = null)
    {
        $this->startDate = $startDate;
        $this->endDate = $endDate;
        $this->itemName = $itemName;
        $this->category = $category;
    }

    public function collection()
    {
        // Build the query with necessary relationships and filters
        $query = VoidRecords::with(['items.category']);
        
        if ($this->startDate) {
            $query->whereDate('voided_at', '>=', $this->startDate);
        }
    
        if ($this->endDate) {
            $query->whereDate('voided_at', '<=', $this->endDate);
        }
    
        if ($this->itemName) {
            $query->where('item_name', 'like', '%' . $this->itemName . '%');
        }
    
        if ($this->category) {
            $query->whereHas('items.category', function ($q) {
                $q->where('category_name', 'like', '%' . $this->category . '%');
            });
        }
    
        // Fetch the filtered data and map it to the required format
        return $query->get()->map(function ($item) {
            return [
                'Date/Time' => Carbon::parse($item->voided_at)->format('Y-m-d H:i:s'),
                'Item Name' => $item->item_name,
                'Category' => $item->items->category->category_name ?? 'N/A',
                'Price' => $item->price ?? 0, // Replace 'price' with the actual price column name
                'Cashier Name' => $item->voided_by ?? 'N/A',
            ];
        });
    }
    

    public function headings(): array
    {
        return ['Date/Time', 'Item Name', 'Category', 'Price', 'Cashier Name'];
    }

    public function startCell(): string
    {
        return 'A7'; // Start data from row 7
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();
    
                // Add dynamic headers
                $sheet->mergeCells('A1:E1');
                $sheet->setCellValue('A1', 'Divine Word College of Calapan');
    
                $sheet->mergeCells('A2:E2');
                $sheet->setCellValue('A2', 'DWCC STORE: Sales and Inventory');
    
                $sheet->mergeCells('A3:E3');
                $sheet->setCellValue('A3', 'Void Item Report');
    
                // Date range information
                $dateRange = $this->startDate && $this->endDate
                    ? $this->startDate . ' to ' . $this->endDate
                    : 'All Dates';
                $sheet->mergeCells('A4:E4');
                $sheet->setCellValue('A4', "Date Range: $dateRange");
    
                // Item Name filter
                $itemNameFilter = $this->itemName ? $this->itemName : 'All Items';
                $sheet->mergeCells('A5:E5');
                $sheet->setCellValue('A5', "Item Name: $itemNameFilter");
    
                // Category filter
                $categoryFilter = $this->category ? $this->category : 'All Categories';
                $sheet->mergeCells('A6:E6');
                $sheet->setCellValue('A6', "Category: $categoryFilter");
    
                // Styling for dynamic headers
                $sheet->getStyle('A1:A6')->getFont()->setBold(true);
                $sheet->getStyle('A1:A3')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
    
                // Adjust column widths for the data
                $sheet->getColumnDimension('A')->setAutoSize(true);
                $sheet->getColumnDimension('B')->setAutoSize(true);
                $sheet->getColumnDimension('C')->setAutoSize(true);
                $sheet->getColumnDimension('D')->setAutoSize(true);
                $sheet->getColumnDimension('E')->setAutoSize(true);
    
                // Footer: Generated By and Generation Date
                $generatedBy = Auth::user()->full_name; // Replace with dynamic user info
                $generationDate = Carbon::now()->format('m-d-Y h:i:s a'); // Current date and time
    
                // Inserting Generated By and Generation Date at the bottom
                $sheet->mergeCells('A' . ($sheet->getHighestRow() + 2) . ':E' . ($sheet->getHighestRow() + 2));
                $sheet->setCellValue('A' . ($sheet->getHighestRow() + 1), "Generated By: $generatedBy");
                $sheet->mergeCells('A' . ($sheet->getHighestRow() + 1) . ':E' . ($sheet->getHighestRow() + 1));
    
                $sheet->mergeCells('A' . ($sheet->getHighestRow() + 2) . ':E' . ($sheet->getHighestRow() + 2));
                $sheet->setCellValue('A' . ($sheet->getHighestRow() + 2), "Generation Date: $generationDate");
    
                // Styling for the footer
                $sheet->getStyle('A' . ($sheet->getHighestRow() - 1) . ':A' . ($sheet->getHighestRow() + 2))
                    ->getFont()->setItalic(true)->setSize(10);
                $sheet->getStyle('A' . ($sheet->getHighestRow() - 1) . ':A' . ($sheet->getHighestRow() + 2))
                    ->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            },
        ];
    }
}